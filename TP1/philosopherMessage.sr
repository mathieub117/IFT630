global philosophe
  const nbPhilosophe := 5
  var philosophes[nbPhilosophe] := ([nbPhilosophe] 0)
  op PrendreBaguette(id:int), DeposerBaguette(id:int)
  body philosophe
    process arbitrator
      do true ->
        in PrendreBaguette(id) ->
		if philosophes[id] = 0 ->
			if philosophes[1 + (id mod nbPhilosophe)] = 0 ->
				philosophes[id] := 1
				philosophes[1 + (id mod nbPhilosophe)] := 1
		    		write("Philosophe",id,"Eat")
			fi
		fi
	[] DeposerBaguette(id) ->
		philosophes[id] := 0
		philosophes[1 + (id mod nbPhilosophe)] := 0
		write("Philosophe",id,"Think")
        ni
      od
      end
    end

resource main()
      import philosophe

      process ps(i:= 1 to philosophe.nbPhilosophe -1)
        do true->
          call PrendreBaguette(i)
          nap(int(random()*1000))
          call DeposerBaguette(i)
        od
      end

      process ps5
      do true ->
        call PrendreBaguette(5)
        nap(int(random()*1000))
	call DeposerBaguette(5)
      od
      end

    end
