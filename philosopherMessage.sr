global CS
  const nbPhilosophe := 5
  var philosophes[nbPhilosophe] := ([nbPhilosophe] 0)
  op CSenter(id:int), CSexit(id:int)
  body CS
    process arbitrator
      do true ->
        in CSenter(id) ->
		if philosophes[id] = 0 ->
			if philosophes[1 + (id mod nbPhilosophe)] = 0 ->
				philosophes[id] := 1
				philosophes[1 + (id mod nbPhilosophe)] := 1
		    		write("Philosophe",id,"Eat")
			fi
		fi
	[] CSexit(id) ->
		philosophes[id] := 0
		philosophes[1 + (id mod nbPhilosophe)] := 0
		write("Philosophe",id,"Think")
        ni
      od
      end
    end

    resource main()
      import CS
      process ps(i:= 1 to CS.nbPhilosophe -1)
        do true->
          call CSenter(i)
          nap(int(random()*1000))
          call CSexit(i)
        od
      end
      process ps5
      do true ->
        call CSenter(5)
        nap(int(random()*1000))
	call CSexit(5)
      od
      end
    end
